quit
exit
q
q()
inp = data.frame(c(95, 85, 80, 70, 60),c(85, 95, 70, 65, 70), header = False)
inp = data.frame(c(95, 85, 80, 70, 60),c(85, 95, 70, 65, 70))
?data.frame
inp
colnames(inp) <- c('math', 'stats')
inp
?predict
inp = data.frame(c(95, 85, 80, 70, 60),c(85, 95, 70, 65, 70))
colnames(inp) <- c('math', 'stats')
fit = lm(stats ~ math, data=inp)
y = predict.lm(fit, 80)
y = predict(fit, 80)
y = predict(fit, c(80))
y = predict(fit, c(80,56))
y = predict.lm(fit, c(80,56))
y = predict.lm(fit, data.frame(c(80)))
y = predict.lm(fit, data.frame(math=c(80)))
y
y = predict.lm(fit, data.frame(math=c(80, 85)))
y
fit
# Enter your code here. Read input from STDIN. Print output to STDOUT
input_data = data.frame(c(95, 85, 80, 70, 60),c(85, 95, 70, 65, 70))
colnames(input_data) <- c('math', 'stats')
fit = lm(stats ~ math, data=input_data)
#summary(m)
data = 80
y = predict.lm(fit, data.frame(math=c(data)))
print(y[1][1])
y
colnames(y)
class(y)
colnames(y)
size(y)
dim(y)
length(y)
y[0]
y[1]
y[[1]]
round(y, 3)
y[[1]]
y[[1]][1]
y[[1]][0]
round(y[[1]], 3)
cat(round(y[[1]], 3))
input_data = data.frame(c(0.18, 1.0, .92, 0.07, .85, .99, .87),
c(0.89, 0.26, 0.11, 0.37, 0.16, 0.41, 0.47),
c(109.85, 155.72, 137.66, 76.17, 139.75, 162.6, 151.77))
colnames(input_data) <- c('x1', 'x2', 'x3')
fit = lm(x3 ~ x1 + x2, data=input_data)
#summary(m)
data = data.frame(c(0.49, 0.57, 0.56, 0.76),c(0.18, 0.83, 0.64, 0.18))
y = predict.lm(fit, data.frame(math=c(data)))
print(y)
#cat(round(y[[1]], 3))
input_data
summary(fit)
data = data.frame(c(0.49, 0.57, 0.56, 0.76),c(0.18, 0.83, 0.64, 0.18))
y = predict(fit, data)
data = data.frame(x1 = c(0.49, 0.57, 0.56, 0.76),
x2 = c(0.18, 0.83, 0.64, 0.18))
y = predict(fit, data)
print(y)
cat(y)
cat(round(y, 3))
class(y)
data.frame(y)
data.frame(round(y,3))
data.frame(op= round(y,3))
cat(data.frame(op= round(y,3)))
print(data.frame(op= round(y,3)))
cat(data.frame(op= round(y,3)))
cat(data.frame(op= round(y,3)))
cat(round(y, 3))
?cat
cat(round(y, 3), sep="\n")
rnorm(1)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
library("rJava")
install.packages("/Users/msharma/Downloads/rhdfs_1.0.8.tar.gz", repos=NULL, type="source")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
install.packages("/Users/msharma/Downloads/rhdfs_1.0.8.tar.gz", repos=NULL, type="source")
library("rJava")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
install.packages("/Users/msharma/Downloads/rhdfs_1.0.8.tar.gz", repos=NULL, type="source")
library("rJava")
library("rJava")
library("rJava")
install.packages("~/Downloads/rJava_0.9-8.tgz", repos = NULL, type = .Platform$pkgType)
library("rJava")
library("rJava")
library("rJava")
install.packages("/Users/msharma/Downloads/rhdfs_1.0.8.tar.gz", repos=NULL, type="source")
library("rJava")
install.packages
install.packages?
?
exi
exists()
?install.packages
remove.packages("rJava")
library("rJava")
install.packages("rJava")
library("rJava")
Sys.setenv("HADOOP_PREFIX"="/usr/local/Cellar/hadoop/2.8.0")
Sys.setenv("HADOOP_CMD"="/usr/local/Cellar/hadoop/2.8.0/bin/hadoop")
install.packages(c("Rcpp", "RJSONIO", "bitops", "digest", "functional", "stringr",
"plyr", "reshape2", "dplyr",  "R.methodsS3", "caTools", "Hmisc"))
library("Rcpp")
library("RJSONIO")
library("bitops")
library("digest")
library("functional")
library("stringr")
library("plyr")
library("reshape2")
library("dplyr")
library( "R.methodsS3")
library("caTools")
library("Hmisc")
Sys.setenv("HADOOP_PREFIX"="/usr/local/Cellar/hadoop/2.8.0")
Sys.setenv("HADOOP_CMD"="/usr/local/Cellar/hadoop/2.8.0/bin/hadoop")
install.packages("/Users/msharma/Downloads/rhdfs_1.0.8.tar.gz", repos=NULL, type="source")
library("rhdfs")
install.packages("/Users/msharma/Downloads/rmr2_3.3.0.tar.gz", repos=NULL, type="source")
hdfs.init()
install.packages("/Users/msharma/Downloads/plyrmr_0.5.0.tar.gz", repos=NULL, type="source")
install.packages("memoise")
install.packages("/Users/msharma/Downloads/plyrmr_0.5.0.tar.gz", repos=NULL, type="source")
hdfs.init()
.libPaths()
system.file(package="functional")
a = c(1,2,3,4,5,6,7,8,9)
a
sapply(a, function(a) a^2)
sapply(a, function(a) a^3)
mapreduce(input=a, map= function(k,v) cbind(v, v^2))
library(rmr2)
library(rmr2)
mapreduce(input=a, map= function(k,v) cbind(v, v^2))
Sys.setenv("HADOOP_PREFIX"="/usr/local/Cellar/hadoop/2.8.0")
Sys.setenv("HADOOP_CMD"="/usr/local/Cellar/hadoop/2.8.0/bin/hadoop")
mapreduce(input=a, map= function(k,v) cbind(v, v^2))
Sys.setenv("HADOOP_STREAMING"="/usr/local/Cellar/hadoop/2.8.0/libexec/share/hadoop/tools/sources/hadoop-streaming-2.8.0-sources.jar")
mapreduce(input=a, map= function(k,v) cbind(v, v^2))
Sys.setenv("HADOOP_STREAMING"="/usr/local/Cellar/hadoop/2.8.0/libexec/share/hadoop/tools/sources/hadoop-streaming-2.8.0-test-sources.jar")
mapreduce(input=a, map= function(k,v) cbind(v, v^2))
Sys.setenv("HADOOP_STREAMING"="/usr/local/Cellar/hadoop/2.8.0/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar")
mapreduce(input=a, map= function(k,v) cbind(v, v^2))
library(rmr2)
library(rhdfs)
hdfs.init()
?map
??map
??rbinom
?rbinom
groups = rbinom(32, n = 50, prob = 0.4)
groups
groups.types
groups.type
type(groups)
tapply(groups, groups, length)
exit()
q()
#Sys.setenv(JAVA_HOME="/Library/Java/Home")
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home")
Sys.setenv(HADOOP_PREFIX="/usr/local/opt/hadoop/libexec")
Sys.setenv(HADOOP_CMD="/usr/local/opt/hadoop/libexec/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/local/Cellar/hadoop/2.8.0/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar")
library(rmr2)
library(rhdfs)
hdfs.init()
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home")
Sys.setenv(HADOOP_PREFIX="/usr/local/opt/hadoop/libexec")
Sys.setenv(HADOOP_CMD="/usr/local/opt/hadoop/libexec/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/local/Cellar/hadoop/2.8.1/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.1.jar")
library(rmr2)
library(rhdfs)
hdfs.init()
#Sys.setenv(JAVA_HOME="/Library/Java/Home")
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home")
Sys.setenv(HADOOP_PREFIX="/usr/local/opt/hadoop/libexec")
Sys.setenv(HADOOP_CMD="/usr/local/opt/hadoop/libexec/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/local/Cellar/hadoop/2.8.1/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.1.jar")
hdfs.init()
getwd()
Sys.getenv("HADOOP_CMD")
hdfs.init()
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home")
Sys.setenv(HADOOP_PREFIX="/usr/local/opt/hadoop/libexec")
Sys.setenv(HADOOP_CMD="/usr/local/opt/hadoop/libexec/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/local/Cellar/hadoop/2.8.1/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.1.jar")
getwd()
library(rmr2)
library(rhdfs)
library(" rJava")
library("rJava")
hdfs.init()
rmr.options(backend="hadoop")
small.ints <- to.dfs(keyval(1, 1:10000))
out <- mapreduce(
input = small.ints,
map = function(k, v) cbind(v, v^2))
res <- from.dfs(out)
head(res)
out <- mapreduce(
input = small.ints)
res <- from.dfs(out)
# please be aware, dfs objects will be a list with two fielfs: key and val
res$key
res$val
out <- mapreduce(
input = small.ints,
map = function(k, v){
keyval(ifelse(v > 10, 0, 1), v)
},
reduce = function(k,v){
keyval(k, length(v))
}
)
res <- from.dfs(out)
head(res$key)
head(res$val)
map <- function(k,lines) {
words.list <- strsplit(lines, '\\s')
words <- unlist(words.list)
return( keyval(words, 1) )
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) {
mapreduce(input=input, output=output, input.format="text",
map=map, reduce=reduce)
}
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home")
Sys.setenv(HADOOP_PREFIX="/usr/local/opt/hadoop/libexec")
Sys.setenv(HADOOP_CMD="/usr/local/opt/hadoop/libexec/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/local/Cellar/hadoop/2.8.1/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.1.jar")
library(rmr2)
library(rhdfs)
hdfs.init()
map <- function(k,lines) {
words.list <- strsplit(lines, '\\s')
words <- unlist(words.list)
return( keyval(words, 1) )
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) {
mapreduce(input=input, output=output, input.format="text",
map=map, reduce=reduce)
}
hdfs.root <- '/user'
hdfs.data <- file.path(hdfs.root, 'words')
hdfs.out <- file.path(hdfs.root, 'out-001')
out <- wordcount(hdfs.data, hdfs.out)
results <- from.dfs(out)
results.df <- as.data.frame(results, stringsAsFactors=F)
colnames(results.df) <- c('word', 'count')
head(results.df[order(results.df$count, decreasing=T), ], 30)
results.df <- as.data.frame(results, stringsAsFactors=F)
colnames(results.df) <- c('word', 'count')
head(results.df[order(results.df$count, decreasing=T), ], 30)
setwd("/Users/msharma/code/AviationAnalysis/")
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home")
Sys.setenv(HADOOP_PREFIX="/usr/local/opt/hadoop/libexec")
Sys.setenv(HADOOP_CMD="/usr/local/opt/hadoop/libexec/bin/hadoop")
Sys.setenv(HADOOP_STREAMING="/usr/local/Cellar/hadoop/2.8.1/libexec/share/hadoop/tools/lib/hadoop-streaming-2.8.1.jar")
library(rhdfs)
hdfs.init()
hdfs.ls("/")
